apiVersion: planetscale.com/v2
kind: VitessCluster
metadata:
  name: db
  namespace: voip
spec:
  globalLockserver:
    external:
      implementation: etcd2
      address: http://vt-etcd-global1.voip.svc.clusterset.local:2379
      rootPath: /primary
  images:
    vtctld: vitess/lite:v9.0.0
    vtorc: vitess/lite:v9.0.0
    vtgate: vitess/lite:v9.0.0
    vttablet: vitess/lite:v9.0.0
    vtbackup: vitess/lite:v9.0.0
    mysqld:
      mysql56Compatible: vitess/lite:v9.0.0
    mysqldExporter: prom/mysqld-exporter:v0.11.0
  federation:
    regionalLockserver: []
  cells:
  - name: central
    lockserver:
      external:
        implementation: etcd2
        address: http://vt-etcd-central-client.voip.svc.clusterset.local:2379
        rootPath: /primary
    gateway:
      authentication:
        static:
          secret:
            name: db-users
            key: db-users.json
      replicas: 3
      extraFlags:
        gate_query_cache_size: "0"
        cells_to_watch: east,central
      storageClassName: premium-rwo
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limit:
          cpu: 2000m
          memory: 2000Mi
  vitessDashboard:
    cells:
    - central
    extraFlags:
      security_policy: read-only
    replicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi

  keyspaces:
  - name: vitess
    turndownPolicy: Immediate
    vitessOrchestrator:
      configSecret:
        name: example-cluster-config
        key: orc_config.json
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
    partitionings:
    - equal:
        parts: 1
        shardTemplate:
          databaseInitScriptSecret:
            name: example-cluster-config
            key: init_db.sql
          replication:
            enforceSemiSync: false
          tabletPools:
          - cell: central
            type: replica
            replicas: 2
            vttablet:
              extraFlags:
                table-acl-config: vitess_acls.json
                queryserver-config-strict-table-acl: "false"
                enforce-tableacl-config: "false"
                queryserver-config-transaction-cap: "200"
                queryserver-config-pool-size: "30"
                queryserver-config-query-cache-size: "0"
                queryserver-config-stream-pool-size: "20"
                enable_transaction_limit: "false"
                enforce_strict_trans_tables: "false"
                db_charset: utf8mb4
                disable_active_reparents: "true"
                enable_semi_sync: "false"
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 2000m
                  memory: 4000Mi
            mysqld:
              configOverrides: "sql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n"
              resources:
                requests:
                  cpu: 100m
                  memory: 1Gi
            dataVolumeClaimTemplate:
              accessModes: ["ReadWriteOnce"]
              storageClassName: premium-rwo
              resources:
                requests:
                  storage: 10Gi

  updateStrategy:
    type: Immediate
---
apiVersion: v1
kind: Service
metadata:
  name: vtgate
  namespace: voip
spec:
  selector:
    planetscale.com/cluster: db
    planetscale.com/component: vtgate
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
---
apiVersion: v1
kind: Secret
metadata:
  name: example-cluster-config
  namespace: voip
type: Opaque
stringData:
  vitess_acls.json: |
    {
      "table_groups": [
        {
          "name": "vitess",
          "table_names_or_prefixes": ["%"],
          "readers": ["vitess", "vitess"],
          "writers": ["vitess", "vitess"],
          "admins": ["vitess", "vitess"]
        }
      ]
    }
  init_db.sql: |
    # This file is executed immediately after mysql_install_db,
    # to initialize a fresh data directory.
    ###############################################################################
    # Equivalent of mysql_secure_installation
    ###############################################################################
    # Changes during the init db should not make it to the binlog.
    # They could potentially create errant transactions on replicas.
    SET sql_log_bin = 0;
    set global max_connections = 2000;
    # Remove anonymous users.
    DELETE FROM mysql.user WHERE User = '';
    # Disable remote root access (only allow UNIX socket).
    DELETE FROM mysql.user WHERE User = 'root' AND Host != 'localhost';
    # Remove test database.
    DROP DATABASE IF EXISTS test;
    ###############################################################################
    # Vitess defaults
    ###############################################################################
    # Vitess-internal database.
    CREATE DATABASE IF NOT EXISTS _vt;
    # Note that definitions of local_metadata and shard_metadata should be the same
    # as in production which is defined in go/vt/mysqlctl/metadata_tables.go.
    CREATE TABLE IF NOT EXISTS _vt.local_metadata (
      name VARCHAR(255) NOT NULL,
      value VARCHAR(255) NOT NULL,
      db_name VARBINARY(255) NOT NULL,
      PRIMARY KEY (db_name, name)
      ) ENGINE=InnoDB;
    CREATE TABLE IF NOT EXISTS _vt.shard_metadata (
      name VARCHAR(255) NOT NULL,
      value MEDIUMBLOB NOT NULL,
      db_name VARBINARY(255) NOT NULL,
      PRIMARY KEY (db_name, name)
      ) ENGINE=InnoDB;
    # Admin user with all privileges.
    CREATE USER 'vt_dba'@'localhost';
    GRANT ALL ON *.* TO 'vt_dba'@'localhost';
    GRANT GRANT OPTION ON *.* TO 'vt_dba'@'localhost';
    # User for app traffic, with global read-write access.
    CREATE USER 'vt_app'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_app'@'localhost';
    # User for app debug traffic, with global read access.
    CREATE USER 'vt_appdebug'@'localhost';
    GRANT SELECT, SHOW DATABASES, PROCESS ON *.* TO 'vt_appdebug'@'localhost';
    # User for administrative operations that need to be executed as non-SUPER.
    # Same permissions as vt_app here.
    CREATE USER 'vt_allprivs'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_allprivs'@'localhost';
    # User for slave replication connections.
    # TODO: Should we set a password on this since it allows remote connections?
    CREATE USER 'vt_repl'@'%';
    GRANT REPLICATION SLAVE ON *.* TO 'vt_repl'@'%';
    # User for Vitess filtered replication (binlog player).
    # Same permissions as vt_app.
    CREATE USER 'vt_filtered'@'localhost';
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, FILE,
      REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES,
      LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW,
      SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER
      ON *.* TO 'vt_filtered'@'localhost';
    # User for Orchestrator (https://github.com/openark/orchestrator).
    # TODO: Reenable when the password is randomly generated.
    CREATE USER 'orc_client_user'@'%' IDENTIFIED BY 'orc_client_user_password';
    GRANT SUPER, PROCESS, REPLICATION SLAVE, RELOAD
      ON *.* TO 'orc_client_user'@'%';
    GRANT SELECT
      ON _vt.* TO 'orc_client_user'@'%';
    FLUSH PRIVILEGES;
    RESET SLAVE ALL;
    RESET MASTER;
  orc_config.json: |
    {
      "Debug": true,
      "Durability": "none",
      "MySQLTopologyUser": "orc_client_user",
      "MySQLTopologyPassword": "orc_client_user_password",
      "MySQLReplicaUser": "vt_repl",
      "MySQLReplicaPassword": "",
      "RecoveryPeriodBlockSeconds": 5
    }
